I"$7<h1 id="development-concept-state-management">Development concept: State management</h1>

<p>State management in complex frontend applications is a topic that has been heavily evolving over the past years. Redux and stores, one-way data flow are all the rage nowadays. OpenProject is an old application, so its frontend exists way before these concepts were introduced and became popular.</p>

<h2 id="key-takeaways">Key takeaways</h2>

<p><em>State managent in OpenProject frontendâ€¦</em></p>

<ul>
  <li>is mainly controlled by <code class="language-plaintext highlighter-rouge">RxJs</code> and the reactivestates library</li>
  <li><code class="language-plaintext highlighter-rouge">State</code> and <code class="language-plaintext highlighter-rouge">InputState</code> are mostly syntactic sugar over RXJS <code class="language-plaintext highlighter-rouge">Subject</code> and <code class="language-plaintext highlighter-rouge">BehaviorSubject</code></li>
  <li>States are used to hold and cache values with their values and non-values being observable</li>
</ul>

<h2 id="inputstate">InputState</h2>

<p>An <code class="language-plaintext highlighter-rouge">InputState</code> object is a wrapper around RXJS Behaviorsubject. It provides some syntactic sugar over it to inspect values and provide helpers to observe streams and fill in the underlying <code class="language-plaintext highlighter-rouge">Subject</code>.</p>

<p>To create an InputState, you call <code class="language-plaintext highlighter-rouge">new InputState&lt;Type&gt;(initialValue:Type|undefined)</code> or use the helper method <code class="language-plaintext highlighter-rouge">input&lt;Type&gt;(initialValue?:Type)</code> which will fall back to the undefined value. You will then be able to inspect its value and contents.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// An initially empty state</span>
<span class="kd">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">InputState</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">isPristine</span><span class="p">());</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">hasValue</span><span class="p">());</span> <span class="c1">// false</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// undefined</span>
</code></pre></div></div>

<p>An InputState will hold exactly one value, that you can fill explicitly:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">state</span><span class="p">.</span><span class="nx">putValue</span><span class="p">(</span><span class="dl">'</span><span class="s1">my value</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">isPristine</span><span class="p">());</span> <span class="c1">// false</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">hasValue</span><span class="p">());</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 'my value'</span>
</code></pre></div></div>

<p>You can find out if a value is older than a specific amount of ms:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">state</span><span class="p">.</span><span class="nx">isValueOlderThan</span><span class="p">(</span><span class="mi">60000</span><span class="p">);</span> <span class="c1">// Value is older than 60 seconds?</span>
</code></pre></div></div>

<p>The value can be explicitly cleared with <code class="language-plaintext highlighter-rouge">state.clear()</code>.</p>

<p>You can also fill the InputState with the result of a promise request. With <code class="language-plaintext highlighter-rouge">putFromPromiseIfPristine</code>, the promise will only be requested if the state is empty. This is useful for performing API requests that should not be re-executed while the value is cached.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">state</span><span class="p">.</span><span class="nx">putFromPromiseIfPristine</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">my new value</span><span class="dl">'</span><span class="p">));</span>
</code></pre></div></div>

<p>To find out if there is an active promise request, use <code class="language-plaintext highlighter-rouge">state.hasActivePromiseRequest()</code>. You can also explicitly clear and put from promise in one step:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">state</span><span class="p">.</span><span class="nx">clearAndPutFromPromise</span><span class="p">(</span><span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">overridden value</span><span class="dl">'</span><span class="p">));</span>
</code></pre></div></div>

<p>You can get an RXJS observable to the value stream with <code class="language-plaintext highlighter-rouge">state.values$()</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">state</span>
  <span class="p">.</span><span class="nx">values$</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">val</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Observed value </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">val</span><span class="p">));</span>
</code></pre></div></div>

<p>You can also observe the <code class="language-plaintext highlighter-rouge">changes</code> which includes undefined values</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">state</span>
  <span class="p">.</span><span class="nx">changes$</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">val</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Observed </span><span class="dl">"</span> <span class="o">+</span> <span class="p">(</span><span class="nx">val</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">String value</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">Undefined</span><span class="dl">"</span><span class="p">));</span>
</code></pre></div></div>

<h2 id="multiinputstate">MultiInputState</h2>

<p>The <code class="language-plaintext highlighter-rouge">MultiInputState</code> is basically a map with a string key and an <code class="language-plaintext highlighter-rouge">InputState</code> as its value. It is used for most of the cache stores in OpenProject.</p>

<p>To create a MultiInputState, you can use the helper method <code class="language-plaintext highlighter-rouge">multiInput&lt;Type&gt;()</code> . To get an InputState member of this map, use the following:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">type</span> <span class="nx">FooType</span> <span class="o">=</span> <span class="p">{</span> <span class="na">id</span><span class="p">:</span><span class="kr">number</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">multi</span> <span class="o">=</span> <span class="nx">multiInput</span><span class="o">&lt;</span><span class="nx">FooType</span><span class="o">&gt;</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">multi</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">my identifier</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">state</span><span class="p">.</span><span class="nx">putValue</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1234</span> <span class="p">});</span>
               
<span class="c1">// Later on</span>
<span class="nx">multi</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">my identifier</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span> <span class="c1">// { id: 1324}</span>
</code></pre></div></div>

<p>The MultiInputState can be observed as a whole:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">multi</span>
  <span class="p">.</span><span class="nx">observeChange</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">subscribe</span><span class="p">(([</span><span class="nx">changedId</span><span class="p">,</span> <span class="nx">foo</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`CHANGE for </span><span class="p">${</span><span class="nx">changedId</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">foo</span><span class="p">?.</span><span class="nx">id</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">cleared</span><span class="dl">'</span><span class="p">}</span><span class="s2">);
}

multi.clear('my identifier');
// CHANGE for my identifier: cleared

multi
  .get('my identifier')
  .putFromPromiseIfPristine(() =&gt; Promise.resolve({ id: 'new' }));

// CHANGE for my identifier: new
</span></code></pre></div></div>

<h2 id="statesgroup">StatesGroup</h2>

<p>The <code class="language-plaintext highlighter-rouge">StatesGroup</code> aggregates multiple States or MultiInputStates into one class. The only benefit to this is debugging capabilities of the reactivestates library. You can call the following method in development mode to see all changes to states in a StateGroup logged to console:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">enableReactiveStatesLogging</span><span class="p">();</span>
</code></pre></div></div>

<p>This might then look like the following, with green color for added objects, and red color for removed values:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[RS] Changesets.changesets[/api/v3/projects/1] {o=4} "[object Object]"
</code></pre></div></div>

<h2 id="-code-references">ðŸ”— Code references</h2>

<ul>
  <li><a href="https://github.com/opf/openproject/blob/dev/frontend/src/app/components/states.service.ts"><code class="language-plaintext highlighter-rouge">StatesService</code></a> Global <code class="language-plaintext highlighter-rouge">States</code> cache of MultiInputStates</li>
  <li><a href="https://github.com/opf/openproject/blob/dev/frontend/src/app/modules/work_packages/query-space/isolated-query-space.ts"><code class="language-plaintext highlighter-rouge">IsolatedQuerySpace</code></a> Query space <code class="language-plaintext highlighter-rouge">StatesGroup</code>. Is instantiated multiple times whenever a work package query is loaded. See <a href="../queries">the separate concept guide</a> for more information.</li>
  <li><a href="https://github.com/ReactiveStates/reactivestates">ReactiveStates</a>  library we use for the StatesGroup. This was developed by Roman primarily for us during AngularJS times.</li>
</ul>

<h2 id="discussions">Discussions</h2>

<ul>
  <li>In contrast to a <code class="language-plaintext highlighter-rouge">Store</code> concept of redux, the States and state groups do not have any concept of data immutability. As a caller you will need to ensure that. In OpenProject, many of the states are in fact mutable due to historic reasons and the fact that complex class instances are passed around that cannot be easily shallow copied. This will need to be refactored in the future.</li>
  <li>As the reactivestates library was primarily developed for us, we may need to take over its code or move to a different state management concept altogether. The recent developments in <code class="language-plaintext highlighter-rouge">ngxs</code> look very promising.</li>
</ul>
:ET